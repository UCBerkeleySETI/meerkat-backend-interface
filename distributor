#!/usr/bin/env python

# import signal
import sys
import os
import logging
import logging.handlers
import json

import time #for testing purposes

import socket
from optparse import OptionParser

import redis
from src import redis_tools

log = logging.getLogger("BLUSE.interface")

CHANNEl     = redis_tools.REDIS_CHANNELS.alerts # Redis channel to listen on
STREAM_TYPE = 'stream_type1'                    # Type of stream to distribute
NCHANNELS   = 64                                # Number of channels to distribute into

CHANNELS = ["chan{:03d}".format(n) for n in range(NCHANNELS)]


if __name__ == "__main__":
    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.add_option('-p', '--port', dest='port', type=long,
        help='Redis port to connect to', default=6379)
    (opts, args) = parser.parse_args()

    # if not opts.port:
    #     print "MissingArgument: Port number"
    #     sys.exit(-1)

    FORMAT = "[ %(levelname)s - %(asctime)s - %(filename)s:%(lineno)s] %(message)s"
    # logger = logging.getLogger('reynard')
    logging.basicConfig(format=FORMAT)
    log.setLevel(logging.DEBUG)
    syslog_addr = '/dev/log' if os.path.exists('/dev/log') else '/var/run/syslog'
    handler = logging.handlers.SysLogHandler(address=syslog_addr) 
    log.addHandler(handler)
    log.info("Starting distributor")

    re = redis.StrictRedis(port=opts.port)
    ps = re.pubsub(ignore_subscribe_messages=True)
    ps.subscribe(CHANNEL)
    try: 
        for message in ps.listen():
            msg_parts = message['data'].split(':')
            if len(msg_parts) != 2:
                log.info("Not processing this message --> {}".format(message))
                continue
            msg_type = msg_parts[0]
            product_id = msg_parts[1]
            if msg_type == 'configure':
                all_streams = json.loads(re.get("{}:streams".format(product_id)))
                streams = all_streams[STREAM_TYPE]
                nstreams = len(streams)
                if nstreams > NCHANNELS:
                    log.warning("More than {} ({}) stream addresses found".format(NCHANNELS, nstreams))
                for i in range(min(nstreams, NCHANNELS)):
                    msg = "{}:configure:stream:{}".format(product_id, streams[i])
                    re.publish(CHANNELS[i], msg)
    except KeyboardInterrupt:
        log.info("Stopping distributor")
        sys.exit(0)
    except Exception as e:
        log.error(e)
        sys.exit(1)
